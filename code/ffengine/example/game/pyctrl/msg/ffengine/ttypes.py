#
# Autogenerated by Thrift Compiler (0.9.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class game_info_t:
  """
  Attributes:
   - game_id
   - name
   - area_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'game_id', None, 0, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.MAP, 'area_list', (TType.I32,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, game_id=thrift_spec[1][4], name=None, area_list=None,):
    self.game_id = game_id
    self.name = name
    self.area_list = area_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.game_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.area_list = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin() 
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = iprot.readString();
            self.area_list[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('game_info_t')
    if self.game_id is not None:
      oprot.writeFieldBegin('game_id', TType.I32, 1)
      oprot.writeI32(self.game_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.area_list is not None:
      oprot.writeFieldBegin('area_list', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.STRING, len(self.area_list))
      for kiter7,viter8 in self.area_list.items():
        oprot.writeI32(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class game_summary_info_t:
  """
  Attributes:
   - game_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'game_info', (TType.I32,None,TType.STRUCT,(game_info_t, game_info_t.thrift_spec)), None, ), # 1
  )

  def __init__(self, game_info=None,):
    self.game_info = game_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.game_info = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin() 
          for _i13 in xrange(_size9):
            _key14 = iprot.readI32();
            _val15 = game_info_t()
            _val15.read(iprot)
            self.game_info[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('game_summary_info_t')
    if self.game_info is not None:
      oprot.writeFieldBegin('game_info', TType.MAP, 1)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.game_info))
      for kiter16,viter17 in self.game_info.items():
        oprot.writeI32(kiter16)
        viter17.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class process_info_t:
  """
  Attributes:
   - name
   - server_type
   - param
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'server_type', None, 0, ), # 2
    (3, TType.MAP, 'param', (TType.STRING,None,TType.STRING,None), None, ), # 3
    (4, TType.I32, 'status', None, 0, ), # 4
  )

  def __init__(self, name=None, server_type=thrift_spec[2][4], param=None, status=thrift_spec[4][4],):
    self.name = name
    self.server_type = server_type
    self.param = param
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.server_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.param = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin() 
          for _i22 in xrange(_size18):
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            self.param[_key23] = _val24
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('process_info_t')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.server_type is not None:
      oprot.writeFieldBegin('server_type', TType.I32, 2)
      oprot.writeI32(self.server_type)
      oprot.writeFieldEnd()
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.param))
      for kiter25,viter26 in self.param.items():
        oprot.writeString(kiter25)
        oprot.writeString(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class instance_info_t:
  """
  Attributes:
   - area_id
   - area_name
   - process_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'area_id', None, 0, ), # 1
    (2, TType.STRING, 'area_name', None, None, ), # 2
    (3, TType.MAP, 'process_list', (TType.I32,None,TType.STRUCT,(process_info_t, process_info_t.thrift_spec)), None, ), # 3
  )

  def __init__(self, area_id=thrift_spec[1][4], area_name=None, process_list=None,):
    self.area_id = area_id
    self.area_name = area_name
    self.process_list = process_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.area_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.area_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.process_list = {}
          (_ktype28, _vtype29, _size27 ) = iprot.readMapBegin() 
          for _i31 in xrange(_size27):
            _key32 = iprot.readI32();
            _val33 = process_info_t()
            _val33.read(iprot)
            self.process_list[_key32] = _val33
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('instance_info_t')
    if self.area_id is not None:
      oprot.writeFieldBegin('area_id', TType.I32, 1)
      oprot.writeI32(self.area_id)
      oprot.writeFieldEnd()
    if self.area_name is not None:
      oprot.writeFieldBegin('area_name', TType.STRING, 2)
      oprot.writeString(self.area_name)
      oprot.writeFieldEnd()
    if self.process_list is not None:
      oprot.writeFieldBegin('process_list', TType.MAP, 3)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.process_list))
      for kiter34,viter35 in self.process_list.items():
        oprot.writeI32(kiter34)
        viter35.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class process_cmd_req_t:
  """
  Attributes:
   - cmd
   - process_name
   - config
   - param
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'cmd', None, None, ), # 1
    (2, TType.STRING, 'process_name', None, None, ), # 2
    (3, TType.STRING, 'config', None, None, ), # 3
    (4, TType.MAP, 'param', (TType.STRING,None,TType.STRING,None), None, ), # 4
  )

  def __init__(self, cmd=None, process_name=None, config=None, param=None,):
    self.cmd = cmd
    self.process_name = process_name
    self.config = config
    self.param = param

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.cmd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.process_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.config = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.param = {}
          (_ktype37, _vtype38, _size36 ) = iprot.readMapBegin() 
          for _i40 in xrange(_size36):
            _key41 = iprot.readString();
            _val42 = iprot.readString();
            self.param[_key41] = _val42
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('process_cmd_req_t')
    if self.cmd is not None:
      oprot.writeFieldBegin('cmd', TType.STRING, 1)
      oprot.writeString(self.cmd)
      oprot.writeFieldEnd()
    if self.process_name is not None:
      oprot.writeFieldBegin('process_name', TType.STRING, 2)
      oprot.writeString(self.process_name)
      oprot.writeFieldEnd()
    if self.config is not None:
      oprot.writeFieldBegin('config', TType.STRING, 3)
      oprot.writeString(self.config)
      oprot.writeFieldEnd()
    if self.param is not None:
      oprot.writeFieldBegin('param', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.param))
      for kiter43,viter44 in self.param.items():
        oprot.writeString(kiter43)
        oprot.writeString(viter44)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class process_cmd_ret_t:
  """
  Attributes:
   - ret_code
   - output_msg
   - info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'ret_code', None, 0, ), # 1
    (2, TType.STRING, 'output_msg', None, None, ), # 2
    (3, TType.MAP, 'info', (TType.STRING,None,TType.STRING,None), None, ), # 3
  )

  def __init__(self, ret_code=thrift_spec[1][4], output_msg=None, info=None,):
    self.ret_code = ret_code
    self.output_msg = output_msg
    self.info = info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.ret_code = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.output_msg = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.MAP:
          self.info = {}
          (_ktype46, _vtype47, _size45 ) = iprot.readMapBegin() 
          for _i49 in xrange(_size45):
            _key50 = iprot.readString();
            _val51 = iprot.readString();
            self.info[_key50] = _val51
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('process_cmd_ret_t')
    if self.ret_code is not None:
      oprot.writeFieldBegin('ret_code', TType.I32, 1)
      oprot.writeI32(self.ret_code)
      oprot.writeFieldEnd()
    if self.output_msg is not None:
      oprot.writeFieldBegin('output_msg', TType.STRING, 2)
      oprot.writeString(self.output_msg)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.MAP, 3)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.info))
      for kiter52,viter53 in self.info.items():
        oprot.writeString(kiter52)
        oprot.writeString(viter53)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
