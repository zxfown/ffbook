#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class friend_t:
  """
  Attributes:
   - tid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tid', None, 0, ), # 1
  )

  def __init__(self, tid=thrift_spec[1][4],):
    self.tid = tid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('friend_t')
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 1)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class task_t:
  """
  Attributes:
   - tid
   - type
   - status
   - start_time
   - condition
   - item_award
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'tid', None, 0, ), # 1
    (2, TType.BYTE, 'type', None, 0, ), # 2
    (3, TType.BYTE, 'status', None, 0, ), # 3
    (4, TType.I32, 'start_time', None, 0, ), # 4
    (5, TType.MAP, 'condition', (TType.I32,None,TType.I32,None), None, ), # 5
    (6, TType.MAP, 'item_award', (TType.I32,None,TType.I32,None), None, ), # 6
  )

  def __init__(self, tid=thrift_spec[1][4], type=thrift_spec[2][4], status=thrift_spec[3][4], start_time=thrift_spec[4][4], condition=None, item_award=None,):
    self.tid = tid
    self.type = type
    self.status = status
    self.start_time = start_time
    self.condition = condition
    self.item_award = item_award

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.tid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BYTE:
          self.type = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BYTE:
          self.status = iprot.readByte();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.condition = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readI32();
            _val6 = iprot.readI32();
            self.condition[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.MAP:
          self.item_award = {}
          (_ktype8, _vtype9, _size7 ) = iprot.readMapBegin()
          for _i11 in xrange(_size7):
            _key12 = iprot.readI32();
            _val13 = iprot.readI32();
            self.item_award[_key12] = _val13
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('task_t')
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I32, 1)
      oprot.writeI32(self.tid)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.BYTE, 2)
      oprot.writeByte(self.type)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.BYTE, 3)
      oprot.writeByte(self.status)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 4)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.condition is not None:
      oprot.writeFieldBegin('condition', TType.MAP, 5)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.condition))
      for kiter14,viter15 in self.condition.items():
        oprot.writeI32(kiter14)
        oprot.writeI32(viter15)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.item_award is not None:
      oprot.writeFieldBegin('item_award', TType.MAP, 6)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.item_award))
      for kiter16,viter17 in self.item_award.items():
        oprot.writeI32(kiter16)
        oprot.writeI32(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class round_info_t:
  """
  Attributes:
   - round_id
   - status
   - star_num
   - rount_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'round_id', None, None, ), # 1
    (2, TType.I16, 'status', None, 0, ), # 2
    (3, TType.I16, 'star_num', None, 0, ), # 3
    (4, TType.I16, 'rount_type', None, 0, ), # 4
  )

  def __init__(self, round_id=None, status=thrift_spec[2][4], star_num=thrift_spec[3][4], rount_type=thrift_spec[4][4],):
    self.round_id = round_id
    self.status = status
    self.star_num = star_num
    self.rount_type = rount_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.round_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.star_num = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I16:
          self.rount_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('round_info_t')
    if self.round_id is not None:
      oprot.writeFieldBegin('round_id', TType.I32, 1)
      oprot.writeI32(self.round_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 2)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.star_num is not None:
      oprot.writeFieldBegin('star_num', TType.I16, 3)
      oprot.writeI16(self.star_num)
      oprot.writeFieldEnd()
    if self.rount_type is not None:
      oprot.writeFieldBegin('rount_type', TType.I16, 4)
      oprot.writeI16(self.rount_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class round_group_info_t:
  """
  Attributes:
   - round_id
   - status
   - round_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'round_id', None, 0, ), # 1
    None, # 2
    (3, TType.I16, 'status', None, 0, ), # 3
    (4, TType.LIST, 'round_info', (TType.STRUCT,(round_info_t, round_info_t.thrift_spec)), None, ), # 4
  )

  def __init__(self, round_id=thrift_spec[1][4], status=thrift_spec[3][4], round_info=None,):
    self.round_id = round_id
    self.status = status
    self.round_info = round_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.round_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.round_info = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = round_info_t()
            _elem23.read(iprot)
            self.round_info.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('round_group_info_t')
    if self.round_id is not None:
      oprot.writeFieldBegin('round_id', TType.I32, 1)
      oprot.writeI32(self.round_id)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 3)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.round_info is not None:
      oprot.writeFieldBegin('round_info', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.round_info))
      for iter24 in self.round_info:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class world_map_detail_t:
  """
  Attributes:
   - chapter_type
   - round_group_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'chapter_type', None, 0, ), # 1
    (2, TType.LIST, 'round_group_info', (TType.STRUCT,(round_group_info_t, round_group_info_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, chapter_type=thrift_spec[1][4], round_group_info=None,):
    self.chapter_type = chapter_type
    self.round_group_info = round_group_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.chapter_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.round_group_info = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = round_group_info_t()
            _elem30.read(iprot)
            self.round_group_info.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('world_map_detail_t')
    if self.chapter_type is not None:
      oprot.writeFieldBegin('chapter_type', TType.I32, 1)
      oprot.writeI32(self.chapter_type)
      oprot.writeFieldEnd()
    if self.round_group_info is not None:
      oprot.writeFieldBegin('round_group_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.round_group_info))
      for iter31 in self.round_group_info:
        iter31.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class game_info_t:
  """
  Attributes:
   - world_map_detail
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.MAP, 'world_map_detail', (TType.I32,None,TType.STRUCT,(world_map_detail_t, world_map_detail_t.thrift_spec)), None, ), # 2
  )

  def __init__(self, world_map_detail=None,):
    self.world_map_detail = world_map_detail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.MAP:
          self.world_map_detail = {}
          (_ktype33, _vtype34, _size32 ) = iprot.readMapBegin()
          for _i36 in xrange(_size32):
            _key37 = iprot.readI32();
            _val38 = world_map_detail_t()
            _val38.read(iprot)
            self.world_map_detail[_key37] = _val38
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('game_info_t')
    if self.world_map_detail is not None:
      oprot.writeFieldBegin('world_map_detail', TType.MAP, 2)
      oprot.writeMapBegin(TType.I32, TType.STRUCT, len(self.world_map_detail))
      for kiter39,viter40 in self.world_map_detail.items():
        oprot.writeI32(kiter39)
        viter40.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class user_data_t:
  """
  Attributes:
   - friend_info
   - task_info
   - game_info
   - right_words_record
   - wrong_words_record
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'friend_info', (TType.STRUCT,(friend_t, friend_t.thrift_spec)), None, ), # 1
    (2, TType.LIST, 'task_info', (TType.STRUCT,(task_t, task_t.thrift_spec)), None, ), # 2
    (3, TType.STRUCT, 'game_info', (game_info_t, game_info_t.thrift_spec), None, ), # 3
    (4, TType.MAP, 'right_words_record', (TType.STRING,None,TType.I32,None), None, ), # 4
    (5, TType.MAP, 'wrong_words_record', (TType.STRING,None,TType.I32,None), None, ), # 5
  )

  def __init__(self, friend_info=None, task_info=None, game_info=None, right_words_record=None, wrong_words_record=None,):
    self.friend_info = friend_info
    self.task_info = task_info
    self.game_info = game_info
    self.right_words_record = right_words_record
    self.wrong_words_record = wrong_words_record

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.friend_info = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = friend_t()
            _elem46.read(iprot)
            self.friend_info.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.task_info = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in xrange(_size47):
            _elem52 = task_t()
            _elem52.read(iprot)
            self.task_info.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.game_info = game_info_t()
          self.game_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.right_words_record = {}
          (_ktype54, _vtype55, _size53 ) = iprot.readMapBegin()
          for _i57 in xrange(_size53):
            _key58 = iprot.readString();
            _val59 = iprot.readI32();
            self.right_words_record[_key58] = _val59
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.MAP:
          self.wrong_words_record = {}
          (_ktype61, _vtype62, _size60 ) = iprot.readMapBegin()
          for _i64 in xrange(_size60):
            _key65 = iprot.readString();
            _val66 = iprot.readI32();
            self.wrong_words_record[_key65] = _val66
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('user_data_t')
    if self.friend_info is not None:
      oprot.writeFieldBegin('friend_info', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.friend_info))
      for iter67 in self.friend_info:
        iter67.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.task_info is not None:
      oprot.writeFieldBegin('task_info', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.task_info))
      for iter68 in self.task_info:
        iter68.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.game_info is not None:
      oprot.writeFieldBegin('game_info', TType.STRUCT, 3)
      self.game_info.write(oprot)
      oprot.writeFieldEnd()
    if self.right_words_record is not None:
      oprot.writeFieldBegin('right_words_record', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.right_words_record))
      for kiter69,viter70 in self.right_words_record.items():
        oprot.writeString(kiter69)
        oprot.writeI32(viter70)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.wrong_words_record is not None:
      oprot.writeFieldBegin('wrong_words_record', TType.MAP, 5)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.wrong_words_record))
      for kiter71,viter72 in self.wrong_words_record.items():
        oprot.writeString(kiter71)
        oprot.writeI32(viter72)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
